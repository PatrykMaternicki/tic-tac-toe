/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _Game = __webpack_require__(1);
	
	document.addEventListener('DOMContentLoaded', function () {
	  loadGame();
	});
	function loadGame() {
	  var GameMenager = new _Game.Game();
	  GameMenager.init();
	  document.getElementById('startApp').addEventListener('click', function () {
	    GameMenager.run();
	  }, 'false');
	}

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Game = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _ConfigMenager = __webpack_require__(2);
	
	var _SceneMenager = __webpack_require__(4);
	
	var _AssetsMenager = __webpack_require__(6);
	
	var _GameControler = __webpack_require__(8);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Game = exports.Game = function () {
	    function Game() {
	        _classCallCheck(this, Game);
	
	        this.configMenager;
	        this.sceneMenager;
	        this.assetsMenager;
	        this.gameControler;
	    }
	
	    _createClass(Game, [{
	        key: 'init',
	        value: function init() {
	            this.configMenager = new _ConfigMenager.ConfigMenager();
	            this.sceneMenager = new _SceneMenager.SceneMenager();
	            this.assetsMenager = new _AssetsMenager.AssetsMenager();
	            this.gameControler = new _GameControler.GameControler();
	            this.assetsMenager.run();
	        }
	    }, {
	        key: 'run',
	        value: function run() {
	            this.configMenager.run();
	            this.configMenager.setAssets(this.assetsMenager.getAssets());
	            this.sceneMenager.addHookRemove(document.getElementById("app"), document.getElementById("form"));
	            this.sceneMenager.remove();
	            this.buildView();
	            this.gameControler.setPlayers(this.configMenager.getPlayer1(), this.configMenager.getPlayer2());
	            this.sceneMenager.setWhoTurn(this.gameControler.whoPlayFirst(), this.configMenager.getPlayer1(), this.configMenager.getPlayer2());
	            this.addEventsToFields();
	        }
	    }, {
	        key: 'buildView',
	        value: function buildView() {
	            this.sceneMenager.addHook(document.getElementById("app"));
	            this.sceneMenager.addGameScene(this.configMenager.getAssets(), this.configMenager.getPlayer1(), this.configMenager.getPlayer2(), this.configMenager.getNowRound());
	        }
	    }, {
	        key: 'addEventsToFields',
	        value: function addEventsToFields() {
	            var _this = this;
	
	            var nodesFields = document.querySelectorAll("td");
	            nodesFields.forEach(function (node) {
	                return node.addEventListener('click', function () {
	
	                    if (_this.gameControler.roundIsEnd()) {
	                        return;
	                    }
	                    _this.startTurn(node);
	                    if (_this.gameControler.getNowTurn() >= 4) {
	                        if (_this.gameControler.getNowTurn() == 9 && !_this.gameControler.roundIsEnd()) {
	                            _this.sceneMenager.addToSceneTie();
	                            window.setTimeout(function () {
	                                _this.sceneMenager.removeSceneWhoWin();
	                                _this.playAgain(document.querySelectorAll("td"));
	                            }, 2000);
	                            return;
	                        }
	
	                        if (_this.gameControler.isWinner(document.querySelectorAll("td"))) {
	                            _this.sceneMenager.addToSceneWhoWin(_this.gameControler.getWinnerPlayer(), _this.configMenager.getAssets());
	                            _this.configMenager.increaseWinStreak(_this.gameControler.getWinnerPlayer());
	                            _this.configMenager.increaseRounds();
	                            if (_this.gameControler.weGetWinnerGame(_this.configMenager.getPlayer1().getWinRound(), _this.configMenager.getPlayer2().getWinRound(), _this.configMenager.getMaxRound())) {
	                                _this.checkAndAddWhoWin();
	                                return;
	                            }
	                            _this.sceneMenager.renderElementsGame(_this.gameControler.getWinnerPlayer(), _this.configMenager.getPlayer1(), _this.configMenager.getPlayer2(), _this.configMenager.getNowRound());
	                            window.setTimeout(function () {
	                                _this.sceneMenager.removeSceneWhoWin();
	                                _this.playAgain(document.querySelectorAll("td"));
	                            }, 2000);
	                        }
	                    }
	                });
	            });
	        }
	    }, {
	        key: 'startTurn',
	        value: function startTurn(node) {
	            if (!this.isEmptyField(node)) {
	                console.log('OK');
	                return;
	            }
	            this.gameControler.addWhoGetField(node);
	            this.sceneMenager.addHook(node);
	            this.sceneMenager.setImageToFieldScene(this.gameControler.getCurrentTurn());
	            this.gameControler.changePlayer();
	            this.sceneMenager.addHook(document.getElementById("whoTurn"));
	            this.sceneMenager.renderElementWhoNowPlay(this.gameControler.getCurrentTurn());
	            this.gameControler.increaseTurn();
	        }
	    }, {
	        key: 'isEmptyField',
	        value: function isEmptyField(node) {
	            if (node.firstElementChild == null) return true;else return false;
	        }
	    }, {
	        key: 'playAgain',
	        value: function playAgain(nodes) {
	            this.sceneMenager.clearField(nodes);
	            this.gameControler.resetRound();
	            this.gameControler.setRoundIsEnd(false);
	        }
	    }, {
	        key: 'checkAndAddWhoWin',
	        value: function checkAndAddWhoWin() {
	            console.log("U here?");
	            console.log(this.configMenager.getPlayer1().getWinRound());
	            console.log(this.configMenager.getMaxRound());
	            if (this.configMenager.getPlayer1().getWinRound() == this.configMenager.getMaxRound()) {
	                this.sceneMenager.addHookRemove(document.getElementById("app"), document.getElementById("allGame"));
	                this.sceneMenager.remove();
	            } else if (this.configMenager.getPlayer2().getWinRound() == this.configMenager.getMaxRound()) {
	                this.sceneMenager.addHookRemove(document.getElementById("app"), document.getElementById("allGame"));
	                this.sceneMenager.remove();
	            }
	        }
	    }]);

	    return Game;
	}();

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ConfigMenager = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Player = __webpack_require__(3);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ConfigMenager = exports.ConfigMenager = function () {
	  function ConfigMenager() {
	    _classCallCheck(this, ConfigMenager);
	
	    this.player1;
	    this.player2;
	    this.assets = new Array();
	    this.nowRound;
	    this.maxRound;
	    this.rdyConfig = false;
	  }
	
	  _createClass(ConfigMenager, [{
	    key: 'run',
	    value: function run() {
	      this.setConfig();
	      this.buildObjectPlayer();
	      this.rdyConfig = true;
	      this.nowRound = 1;
	      console.log(this.nowRound);
	      console.log(this.player1);
	      console.log(this.player2);
	    }
	  }, {
	    key: 'setConfig',
	    value: function setConfig() {
	      this.setRound();
	    }
	  }, {
	    key: 'setRound',
	    value: function setRound() {
	      var OptionsDOM = document.getElementById('roundOptions');
	      this.maxRound = OptionsDOM.options[OptionsDOM.selectedIndex].value;
	    }
	  }, {
	    key: 'getNowRound',
	    value: function getNowRound() {
	      return this.nowRound;
	    }
	  }, {
	    key: 'getMaxRound',
	    value: function getMaxRound() {
	      return this.maxRound;
	    }
	  }, {
	    key: 'buildObjectPlayer',
	    value: function buildObjectPlayer() {
	      this.player1 = new _Player.Player();
	      var namePlayer = document.getElementById('player1').value;
	      this.player1.setNamePlayer(namePlayer);
	      this.player1.setId(0);
	      this.player2 = new _Player.Player();
	      namePlayer = document.getElementById('player2').value;
	      this.player2.setNamePlayer(namePlayer);
	      this.player2.setId(1);
	      var imagePlayer = new Image();
	      imagePlayer.src = './JS/modules/Model/Assests/tac.png';
	      this.player1.setImage(imagePlayer);
	      var imagePlayer2 = new Image();
	      imagePlayer2.src = './JS/modules/Model/Assests/tic.png';
	      this.player2.setImage(imagePlayer2);
	      this.player1.setRound(0);
	      this.player2.setRound(0);
	    }
	  }, {
	    key: 'setAssets',
	    value: function setAssets(item) {
	      this.assets = item;
	    }
	  }, {
	    key: 'getAssets',
	    value: function getAssets() {
	      return this.assets;
	    }
	  }, {
	    key: 'getPlayer1',
	    value: function getPlayer1() {
	      return this.player1;
	    }
	  }, {
	    key: 'getPlayer2',
	    value: function getPlayer2() {
	      return this.player2;
	    }
	  }, {
	    key: 'increaseWinStreak',
	    value: function increaseWinStreak(objectPlayer) {
	      if (objectPlayer.getId() == 0) {
	        this.player1.increaseWinRounds();
	      } else {
	        this.player2.increaseWinRounds();
	      }
	    }
	  }, {
	    key: 'increaseRounds',
	    value: function increaseRounds() {
	      this.nowRound++;
	    }
	  }]);

	  return ConfigMenager;
	}();

/***/ },
/* 3 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Player = exports.Player = function () {
	  function Player() {
	    _classCallCheck(this, Player);
	  }
	
	  _createClass(Player, [{
	    key: "contructor",
	    value: function contructor() {
	      this.round;
	      this.Image;
	      this.namePlayer;
	      this.id;
	    }
	  }, {
	    key: "setNamePlayer",
	    value: function setNamePlayer(namePlayer) {
	      this.namePlayer = namePlayer;
	    }
	  }, {
	    key: "getNamePlayer",
	    value: function getNamePlayer() {
	      return this.namePlayer;
	    }
	  }, {
	    key: "setImage",
	    value: function setImage(imageDOM) {
	      this.Image = imageDOM;
	    }
	  }, {
	    key: "getImageSrc",
	    value: function getImageSrc() {
	      return this.Image.src;
	    }
	  }, {
	    key: "setRound",
	    value: function setRound(round) {
	      this.round = round;
	    }
	  }, {
	    key: "getWinRound",
	    value: function getWinRound() {
	      console.log(this.round);
	      return this.round;
	    }
	  }, {
	    key: "setId",
	    value: function setId(id) {
	      this.id = id;
	    }
	  }, {
	    key: "getId",
	    value: function getId() {
	      return this.id;
	    }
	  }, {
	    key: "increaseWinRounds",
	    value: function increaseWinRounds() {
	      this.round++;
	    }
	  }]);

	  return Player;
	}();

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SceneMenager = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Scene = __webpack_require__(5);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var SceneMenager = exports.SceneMenager = function () {
	  function SceneMenager() {
	    _classCallCheck(this, SceneMenager);
	
	    this.scene = new _Scene.Scene();
	    this.hook;
	  }
	
	  _createClass(SceneMenager, [{
	    key: 'remove',
	    value: function remove() {
	      this.deleteScene();
	    }
	  }, {
	    key: 'addHook',
	    value: function addHook(hook) {
	      this.hook = hook;
	    }
	  }, {
	    key: 'addHookRemove',
	    value: function addHookRemove(parentElement, childElement) {
	      this.scene.setReferenceElement(parentElement);
	      this.scene.setChildElement(childElement);
	    }
	  }, {
	    key: 'deleteScene',
	    value: function deleteScene() {
	      var parentElement = this.scene.getReferenceElement();
	      var childElement = this.scene.getChildElement();
	      console.log(childElement);
	      parentElement.removeChild(childElement);
	    }
	  }, {
	    key: 'addGameScene',
	    value: function addGameScene(assets, player1, player2, round) {
	      console.log('Your ID?' + player2.getId());
	      this.hook.style.width = "100%";
	      this.addScene(assets[0]);
	      this.setPlayerToScene(player1);
	      this.setPlayerToScene(player2);
	      this.setRoundsToScene(round);
	    }
	  }, {
	    key: 'addScene',
	    value: function addScene(asset) {
	      console.log(asset);
	      this.hook.innerHTML = this.hook.innerHTML + asset;
	    }
	  }, {
	    key: 'setPlayerToScene',
	    value: function setPlayerToScene(objectPlayer) {
	      console.log(objectPlayer.getId());
	      if (objectPlayer.getId() == 0) {
	        var imagePlayer = new Image(100, 100);
	        imagePlayer.src = objectPlayer.getImageSrc();
	        document.getElementById('imagePlayer').appendChild(imagePlayer);
	        document.getElementById('player1').innerHTML = "<p class='infoTextPlayer'>Player 1</p>" + objectPlayer.getNamePlayer();
	        document.getElementById('winRounds').innerHTML = "<p class='infoWinRounds'>Win Round<br><br></p>" + objectPlayer.getWinRound();
	      } else if (objectPlayer.getId() == 1) {
	        console.log('RUN?');
	        console.log(objectPlayer);
	        var imagePlayer = new Image(100, 100);
	        imagePlayer.src = objectPlayer.getImageSrc();
	        document.getElementById('imagePlayer2').appendChild(imagePlayer);
	        document.getElementById('player2').innerHTML = "<p class='infoTextPlayer'>Player 2</p>" + objectPlayer.getNamePlayer();
	        document.getElementById('winRounds2').innerHTML = "<p class='infoWinRounds'>Win Round<br><br></p>" + objectPlayer.getWinRound();
	      }
	    }
	  }, {
	    key: 'setRoundsToScene',
	    value: function setRoundsToScene(round) {
	      document.getElementById('roundNow').innerHTML = "<p class='infoTextPlayer'>Round</p>" + round;
	    }
	  }, {
	    key: 'setWhoTurn',
	    value: function setWhoTurn(number, player1, player2) {
	      var imagePlayer = new Image(100, 100);
	      if (number == 0) {
	        imagePlayer.src = player1.getImageSrc();
	        document.getElementById('whoTurn').innerHTML = "<p id='whoTurnNamePlayer' class ='infoTextPlayer'>Now Turn</p>" + player1.getNamePlayer();
	        document.getElementById('whoTurn').insertBefore(imagePlayer, document.getElementById('whoTurnNamePlayer'));
	      } else {
	        imagePlayer.src = player2.getImageSrc();
	        document.getElementById('whoTurn').innerHTML = "<p id='whoTurnNamePlayer' class ='infoTextPlayer'>Now Turn</p>" + player2.getNamePlayer();
	        document.getElementById('whoTurn').insertBefore(imagePlayer, document.getElementById('whoTurnNamePlayer'));
	      }
	    }
	  }, {
	    key: 'setImageToFieldScene',
	    value: function setImageToFieldScene(objectPlayer) {
	      imagePlayer = new Image(150, 150);
	      imagePlayer.src = objectPlayer.getImageSrc();
	      imagePlayer.classList.add("fieldImage");
	      this.hook.appendChild(imagePlayer);
	    }
	  }, {
	    key: 'renderElementWhoNowPlay',
	    value: function renderElementWhoNowPlay(objectPlayer) {
	      this.hook.innerHTML = "<p id='whoTurnNamePlayer' class ='infoTextPlayer'>Now Turn</p>" + objectPlayer.getNamePlayer();
	      var imagePlayer = new Image(100, 100);
	      imagePlayer.src = objectPlayer.getImageSrc();
	      this.hook.insertBefore(imagePlayer, document.getElementById('whoTurnNamePlayer'));
	    }
	  }, {
	    key: 'addToSceneWhoWin',
	    value: function addToSceneWhoWin(player) {
	      document.getElementById('frame').classList.add("frameWin");
	      document.getElementById('frame').innerHTML = "Winner  <br><br>" + player.getNamePlayer();
	    }
	  }, {
	    key: 'removeSceneWhoWin',
	    value: function removeSceneWhoWin() {
	      document.getElementById('frame').classList.remove("frameWin");
	      document.getElementById("frame").innerHTML = "";
	    }
	  }, {
	    key: 'renderElementsGame',
	    value: function renderElementsGame(winnerPlayer, player1, player2, round) {
	      if (winnerPlayer.getId() == player1.getId()) {
	        document.getElementById("winRounds").innerHTML = "<p class='infoWinRounds'>Win Round<br><br></p>" + winnerPlayer.getWinRound();
	      } else {
	        document.getElementById("winRounds2").innerHTML = "<p class='infoWinRounds'>Win Round<br><br></p>" + winnerPlayer.getWinRound();
	      }
	      this.setRoundsToScene(round);
	    }
	  }, {
	    key: 'addToSceneTie',
	    value: function addToSceneTie() {
	      document.getElementById('frame').classList.add("frameWin");
	      document.getElementById('frame').innerHTML = "tie";
	    }
	  }, {
	    key: 'clearField',
	    value: function clearField(nodes) {
	      var _this = this;
	
	      nodes.forEach(function (node) {
	        if (node.firstElementChild != null) {
	          node.id = "";
	          _this.scene.setReferenceElement(node);
	          _this.scene.setChildElement(node.firstElementChild);
	          _this.deleteScene();
	        }
	      });
	    }
	  }]);

	  return SceneMenager;
	}();

/***/ },
/* 5 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Scene = exports.Scene = function () {
	  function Scene() {
	    _classCallCheck(this, Scene);
	
	    this.referenceElement;
	    this.childElement;
	  }
	
	  _createClass(Scene, [{
	    key: "setReferenceElement",
	    value: function setReferenceElement(parentItem) {
	      this.referenceElement = parentItem;
	    }
	  }, {
	    key: "getReferenceElement",
	    value: function getReferenceElement() {
	      return this.referenceElement;
	    }
	  }, {
	    key: "setChildElement",
	    value: function setChildElement(childItem) {
	      this.childElement = childItem;
	    }
	  }, {
	    key: "getChildElement",
	    value: function getChildElement() {
	      return this.childElement;
	    }
	  }]);

	  return Scene;
	}();

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.AssetsMenager = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _AssetsBuilder = __webpack_require__(7);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var AssetsMenager = exports.AssetsMenager = function () {
	  function AssetsMenager() {
	    _classCallCheck(this, AssetsMenager);
	
	    this.assetsBuilder = new _AssetsBuilder.AssetsBuilder();
	    this.assets = new Array();
	  }
	
	  _createClass(AssetsMenager, [{
	    key: 'run',
	    value: function run() {
	
	      var requestAssets = this.assetsBuilder.uploadAssets(0);
	      requestAssets.then(function (assets) {
	        this.setAssets(assets);
	      }.bind(this));
	
	      var requestAssets1 = this.assetsBuilder.uploadAssets(1);
	      requestAssets1.then(function (assets) {
	        this.setAssets(assets);
	      }.bind(this));
	    }
	  }, {
	    key: 'getAssets',
	    value: function getAssets() {
	      return this.assets;
	    }
	  }, {
	    key: 'setAssets',
	    value: function setAssets(item) {
	      this.assets.push(item);
	    }
	  }]);

	  return AssetsMenager;
	}();

/***/ },
/* 7 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var AssetsBuilder = exports.AssetsBuilder = function () {
	  function AssetsBuilder() {
	    _classCallCheck(this, AssetsBuilder);
	
	    this.urlList = ['JS/modules/Model/Assests/assets_game.php', 'JS/modules/Model/Assests/assets_congratulationWinner.php'];
	  }
	
	  _createClass(AssetsBuilder, [{
	    key: 'uploadAssets',
	    value: function uploadAssets(number) {
	      var headers = new Headers();
	      headers.set('Content-Type', 'text/html');
	      headers.set('Method', 'GET');
	      var request = new Request(this.urlList[number], headers);
	      return fetch(request).then(function (response) {
	        return response.text();
	      }).then(function (text) {
	        return text;
	      });
	    }
	  }]);

	  return AssetsBuilder;
	}();

/***/ },
/* 8 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var GameControler = exports.GameControler = function () {
	    function GameControler() {
	        _classCallCheck(this, GameControler);
	
	        this.player1;
	        this.player2;
	        this.winnerPlayr;
	        this.currentPlayGame;
	        this.nowTurn = 0;
	        this.isRoundIsEnd = false;
	    }
	
	    _createClass(GameControler, [{
	        key: "setPlayers",
	        value: function setPlayers(player1, player2) {
	            this.player1 = player1;
	            this.player2 = player2;
	        }
	    }, {
	        key: "whoPlayFirst",
	        value: function whoPlayFirst() {
	            var roundNumber = Math.round(Math.random() * 1);
	            if (roundNumber == 0) {
	                this.currentPlayGame = this.player1;
	                return roundNumber;
	            } else {
	                this.currentPlayGame = this.player2;
	                return roundNumber;
	            }
	        }
	    }, {
	        key: "changePlayer",
	        value: function changePlayer() {
	            if (this.currentPlayGame.getId() == 0) {
	                this.currentPlayGame = this.player2;
	            } else if (this.currentPlayGame.getId() == 1) {
	                this.currentPlayGame = this.player1;
	            }
	        }
	    }, {
	        key: "addWhoGetField",
	        value: function addWhoGetField(node) {
	            node.id = this.currentPlayGame.getId();
	        }
	    }, {
	        key: "getCurrentTurn",
	        value: function getCurrentTurn() {
	            return this.currentPlayGame;
	        }
	    }, {
	        key: "increaseTurn",
	        value: function increaseTurn() {
	            this.nowTurn++;
	        }
	    }, {
	        key: "getNowTurn",
	        value: function getNowTurn() {
	            return this.nowTurn;
	        }
	    }, {
	        key: "isWinner",
	        value: function isWinner(nodes) {
	            for (var i = 0; i <= 1; i++) {
	
	                if (this.onLevelIsWin(i, nodes) || this.onVerirticalIsWin(i, nodes) || this.onDiagonalyLeftIsWin(i, nodes) || this.onDiagonalyRightIsWin(i, nodes)) {
	                    this.setWhoIsWinner(i);
	                    console.log(this.winnerPlayer);
	                    this.isRoundIsEnd = true;
	                    return true;
	                }
	            }
	        }
	    }, {
	        key: "onLevelIsWin",
	        value: function onLevelIsWin(i, nodes) {
	            var n = 0;
	            for (var c = 0; c <= 2; c++) {
	                console.log(c);
	                console.log("Now " + n);
	                if (nodes[n].id == i && nodes[n + 1].id == i && nodes[n + 2].id == i && nodes[n].id != "" && nodes[n + 1].id != "" && nodes[n + 2].id != "") {
	
	                    return true;
	                }
	                n = n + 3;
	            }
	        }
	    }, {
	        key: "onVerirticalIsWin",
	        value: function onVerirticalIsWin(i, nodes) {
	            var n = 0;
	            for (var c = 0; c <= 2; c++) {
	                if (nodes[n].id == i && nodes[n + 3].id == i && nodes[n + 6].id == i && nodes[n].id != "" && nodes[n + 3].id != "" && nodes[n + 6].id != "") {
	                    return true;
	                }
	                n++;
	            }
	        }
	    }, {
	        key: "onDiagonalyLeftIsWin",
	        value: function onDiagonalyLeftIsWin(i, nodes) {
	            if (nodes[0].id == i && nodes[4].id == i && nodes[8].id == i && nodes[0].id != "" && nodes[4].id != "" && nodes[8].id != "") {
	                return true;
	            }
	        }
	    }, {
	        key: "onDiagonalyRightIsWin",
	        value: function onDiagonalyRightIsWin(i, nodes) {
	            if (nodes[2].id == i && nodes[4].id == i && nodes[6].id == i && nodes[2].id != "" && nodes[4].id != "" && nodes[6].id != "") {
	                return true;
	            }
	        }
	    }, {
	        key: "setWhoIsWinner",
	        value: function setWhoIsWinner(i) {
	            if (this.player1.getId() == i) {
	                this.winnerPlayer = this.player1;
	                return;
	            } else if (this.player2.getId() == i) {
	                this.winnerPlayer = this.player2;
	                return;
	            }
	        }
	    }, {
	        key: "roundIsEnd",
	        value: function roundIsEnd() {
	            return this.isRoundIsEnd;
	        }
	    }, {
	        key: "getWinnerPlayer",
	        value: function getWinnerPlayer() {
	            return this.winnerPlayer;
	        }
	    }, {
	        key: "setRoundIsEnd",
	        value: function setRoundIsEnd(stateGame) {
	            this.isRoundIsEnd = stateGame;
	        }
	    }, {
	        key: "resetRound",
	        value: function resetRound() {
	            this.nowTurn = 0;
	        }
	    }, {
	        key: "weGetWinnerGame",
	        value: function weGetWinnerGame(player1WinRound, player2WinRound, maxRound) {
	            if (player1WinRound == maxRound || player2WinRound == maxRound) {
	                return true;
	            }
	            return false;
	        }
	    }]);

	    return GameControler;
	}();

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,